AWSTemplateFormatVersion:             '2010-09-09'
Description:                          "This template creates VPC, Multi-AZ Pvt-Pub subnets, SGs, Route tables and IGW"
Parameters:
  VPCCIDR:
    Description:                      Define VPC CIDR block address
    Type:                             String
    Default:                          10.0.0.0/16
  AZ1PvtSubnetCIDR:
    Description:                      Define VPC CIDR block address
    Type:                             String
    Default:                          10.0.1.0/24
  AZ1PubSubnetCIDR:
    Description:                      Define VPC CIDR block address
    Type:                             String
    Default:                          10.0.2.0/24
  AZ2PvtSubnetCIDR:
    Description:                      Define VPC CIDR block address
    Type:                             String
    Default:                          10.0.3.0/24
  AZ2PubSubnetCIDR:
    Description:                      Define VPC CIDR block address
    Type:                             String
    Default:                          10.0.4.0/24
Resources:
  myInternetGateway:
    Type:                             AWS::EC2::InternetGateway
  myPvtRouteTable:
    Type:                             AWS::EC2::RouteTable
    Properties:
      VpcId:                          !Ref VPCHDFS
  myPubRouteTable:
    Type:                             AWS::EC2::RouteTable
    Properties:
      VpcId:                          !Ref VPCHDFS
  VPCHDFS:
    Type:                             AWS::EC2::VPC
    Properties:
      CidrBlock:                      !Ref VPCCIDR
      EnableDnsSupport:               'true'
      EnableDnsHostnames:             'true'
  AttachIGWToVPC:
    Type:                             AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:                          !Ref VPCHDFS
      InternetGatewayId:              !Ref myInternetGateway
  AZ1PvtSubnet:
    Type:                             AWS::EC2::Subnet
    Properties:
      CidrBlock:                      !Ref AZ1PvtSubnetCIDR
      MapPublicIpOnLaunch:            'false'
      AvailabilityZone:               !Select [ 0, !GetAZs '' ]
      VpcId:                          !Ref VPCHDFS
  AZ1PubSubnet:
    Type:                             AWS::EC2::Subnet
    Properties:
      CidrBlock:                      !Ref AZ1PubSubnetCIDR
      MapPublicIpOnLaunch:            'true'
      AvailabilityZone:               !Select [ 0, !GetAZs '' ]
      VpcId:                          !Ref VPCHDFS
  AZ2PvtSubnet:
    Type:                             AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref:                          AZ2PvtSubnetCIDR
      MapPublicIpOnLaunch:            'false'
      AvailabilityZone:               !Select [ 1, !GetAZs '' ]
      VpcId:
        Ref:                          VPCHDFS
  AZ2PubSubnet:
    Type:                             AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref:                          AZ2PubSubnetCIDR
      MapPublicIpOnLaunch:            'true'
      AvailabilityZone:               !Select [ 1, !GetAZs '' ]
      VpcId:                          !Ref VPCHDFS
  myPvtSubnetRouteTableAssociation1:
    Type:                             AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:                       !Ref AZ1PvtSubnet
      RouteTableId:                   !Ref myPvtRouteTable
  myPvtSubnetRouteTableAssociation2:
    Type:                             AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:                       !Ref AZ2PvtSubnet
      RouteTableId:                   !Ref myPvtRouteTable
  myPubSubnetRouteTableAssociation1:
    Type:                             AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:                       !Ref AZ1PubSubnet
      RouteTableId:                   !Ref myPubRouteTable
  myPubSubnetRouteTableAssociation2:
    Type:                             AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:                       !Ref AZ2PubSubnet
      RouteTableId:                   !Ref myPubRouteTable
  myPubRoute:
    Type:                             AWS::EC2::Route
    Properties:
      RouteTableId:                   !Ref myPubRouteTable
      DestinationCidrBlock:           0.0.0.0/0
      GatewayId:                      !Ref myInternetGateway
  mySecurityGroup:
    Type:                             AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:               Security Group for HDFS cluster VPC
      VpcId:                          !Ref VPCHDFS
  myHTTPIngressSGRule:
    Type:                             AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:                        !GetAtt mySecurityGroup.GroupId
      IpProtocol:                     tcp
      FromPort:                       '80'
      ToPort:                         '80'
      CidrIp:                         0.0.0.0/0
  myAllInternalIngressSGRule:
    Type:                             AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:                        !GetAtt mySecurityGroup.GroupId
      IpProtocol:                     tcp
      FromPort:                       '0'
      ToPort:                         '65535'
      SourceSecurityGroupId:          !GetAtt mySecurityGroup.GroupId
  mySSHIngressSGRule:
    Type:                             AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:                        !GetAtt mySecurityGroup.GroupId
      IpProtocol:                     tcp
      FromPort:                       '22'
      ToPort:                         '22'
      CidrIp:                         0.0.0.0/0
  myResourceManagerIngressSGRule:
    Type:                             AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:                        !GetAtt mySecurityGroup.GroupId
      IpProtocol:                     tcp
      FromPort:                       '8032'
      ToPort:                         '8032'
      CidrIp:                         0.0.0.0/0
  myNameNodeIngressSGRule:
    Type:                             AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:                        !GetAtt mySecurityGroup.GroupId
      IpProtocol:                     tcp
      FromPort:                       '50070'
      ToPort:                         '50070'
      CidrIp:                         0.0.0.0/0
Outputs:
  AZ1PubSubnet:
    Value:                            !Ref AZ1PubSubnet
  HDFSSecurityGroup:
    Value:                            !GetAtt mySecurityGroup.GroupId
  AZ1PvtSubnet:
    Value:                            !Ref AZ1PvtSubnet
  AZ2PubSubnet:
    Value:                            !Ref AZ2PubSubnet
  AZ2PvtSubnet:
    Value:                            !Ref AZ2PvtSubnet
